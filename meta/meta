#!/usr/bin/env node
//
// A Meta Compiler Language
//
// Copyright 2018 Lorenz Pretterhofer <krysole@alexicalmistake.com>
//
// Permission to use, copy, modify, and distribute this work for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE WORK IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS WORK INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS WORK.
//
"use strict";

let fs              = require("fs");
let inspect         = require("util").inspect;

let Parser          = require("./Parser.js");
let Simplify        = require("./Simplify.js");
let AnalyzeBindings = require("./AnalyzeBindings.js");
let GenerateJS      = require("./GenerateJS.js");


function main() {
  let mode       = null;
  let outputPath = null;
  let inputPath  = null;
  
  let i = 2;
  let c = process.argv.length;
  while (i < c) {
    let o = process.argv[i++];
    
    // Display usage and exit if help is specified.
    if (o === "--help") {
      usage();
    }
    
    // Compile mode.
    if (o === "--parse") {
      if (mode != null) abort(`Cannot specify both --${mode} and ${o} compiler modes.`);
      mode = `parse`;
      continue;
    }
    if (o === "--simplify") {
      if (mode != null) abort(`Cannot specify both --${mode} and ${o} compiler modes.`);
      mode = `simplify`;
      continue;
    }
    if (o === "--analyze") {
      if (mode != null) abort(`Cannot specify both --${mode} and ${o} compiler modes.`);
      mode = `analyze`;
      continue;
    }
    if (o === "--generate") {
      if (mode != null) abort(`Cannot specify both --${mode} and ${o} compiler modes.`);
      mode = `generate`;
      continue;
    }
    
    // Output target file path.
    if (o === "--output") {
      if (i === c)            abort(`Expected path argument for --output/-o.`);
      if (outputPath != null) abort(`Cannot specify --output/-o twice.`);
      outputPath = process.argv[i++];
      continue;
    }
    
    // Short options
    if (o.match(/^-[a-zA-Z0-9]+$/)) {
      for (let si = 1, sc = o.length; si < sc; si++) {
        let so = o[si];
        
        // Display usage and exit if help is specified.
        if (so === "h") {
          usage();
        }
        
        // Output target file path.
        if (so === "o") {
          if (i === c)            abort(`Expected path argument for --output/-o.`);
          if (outputPath != null) abort(`Cannot specify --output/-o twice.`);
          outputPath = process.argv[i++];
          continue;
        }
        
        // Unrecognized short option
        abort(`Unrecognized short option ${so}.`);
      }
      continue;
    }
    
    // Unrecognized regular option
    if (o.match(/^--.*$/)) {
      abort(`Unrecognized option ${o}.`);
    }
    
    // Grammar file
    if (inputPath != null) abort(`Cannot specify input twice.`);
    inputPath = o;
  }
  
  // Set default options where not explicitly specified.
  if (mode == null) mode = "generate";
  
  // Ensure that required options are present
  if (inputPath == null) usage();
  
  
  // Read input
  if (!fs.existsSync(inputPath)) abort(`Specified input path ${inputPath} does not exist.`);
  let inputString = fs.readFileSync(inputPath, "utf8");
  
  
  // Parse input
  let ast = new Parser().match("grammar", inputString, inputPath);
  if (mode === "parse") {
    output(outputPath, inspect(ast, { depth: null }) + "\n");
  }
  
  
  // Simplify AST
  new Simplify().handle(ast);
  if (mode === "simplify") {
    output(outputPath, inspect(ast, { depth: null }) + "\n");
  }
  
  
  // Analyze AST
  new AnalyzeBindings().handle(ast);
  if (mode === "analyze") {
    output(outputPath, inspect(ast, { depth: null }) + "\n");
  }
  
  
  // Generate JavaScript
  new GenerateJS().handle(ast);
  if (mode === "generate") {
    output(outputPath, ast.js);
  }
  
  
  throw new Error();
}

function abort(message) {
  console.error(message);
  process.exit(1);
}

function output(path, string) {
  if (path != null) fs.writeFileSync(path, string);
  else              process.stdout.write(string);
  process.exit(0);
}

function usage() {
  console.error(`usage: meta [-o output-path] input-path`);
  console.error(``);
  console.error(`       --parse                  AST output.`);
  console.error(`       --simplify               Simplified AST output.`);
  console.error(`       --analyze                Simplified and analyzed AST output.`);
  console.error(`       --generate (default)     JavaScript output.`);
  console.error(`  -o | --output path            Write output to path instead of stdout.`);
  console.error(`  -h | --help                   Display this usage message.`);
  console.error(``);
  process.exit(1);
}

setTimeout(main);
