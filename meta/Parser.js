// Generated by meta.
"use strict";

const FAIL = Symbol("FAIL");

module.exports =
class Parser {
  
  match(rule, input, name) {
    this.$input    = input;
    this.$name     = (name != null ? name : "unnamed");
    this.$position = 0;
    this.$furthest = 0;
    this.$memotab  = [];
    
    for (let i = 0, c = this.$input.length + 1; i < c; i++) {
      this.$memotab[i] = { rule: null, result: null, position: -1 }
    }
    
    let result = this[rule]();
    if (result !== FAIL) {
      return result;
    }
    else {
      throw new Error(`Failed to match, furthest position ${this.linecol(this.$furthest)}.`);
    }
  }
  
  log(message) {
    console.log(`${this.constructor.name}.prototype.log() ${this.linecol()} ${message}`);
  }
  
  linecol(position) {
    if (position == null) position = this.$position;
    
    let line   = 1;
    let column = 1;
    
    for (let i = 0; i < position; i++) {
      if (this.$input[i] === "\r") {
        if (this.$input[i + 1] === "\n") i++;
        line++;
        column = 1;
      }
      else if (this.$input[i] === "\n") {
        if (this.$input[i + 1] === "\r") i++;
        line++;
        column = 1;
      }
      else {
        column++;
      }
    }
    
    return {
      name: this.$name,
      line: line,
      column: column,
      toString() { return `${this.name}:${this.line}:${this.column}`; },
    };
  }
  
  char(charset) {
    if (this.$position >= this.$input.length) return FAIL;
    
    let c = this.$input[this.$position];
    if (charset != null && !charset.includes(c)) return FAIL;
    
    this.$position += 1;
    if (this.$position > this.$furthest) this.$furthest = this.$position;
    
    return c;
  }
  
  range(start, end) {
    if (this.$position >= this.$input.length) return FAIL;
    
    let c = this.$input[this.$position];
    if (c < start || c > end) return FAIL;
    
    this.$position += 1;
    if (this.$position > this.$furthest) this.$furthest = this.$position;
    
    return c;
  }
  
  string(string) {
    if (this.$input.slice(this.$position, this.$position + string.length) === string) {
      this.$position += string.length;
      if (this.$position > this.$furthest) this.$furthest = this.$position;
      
      return string;
    }
    else {
      return FAIL;
    }
  }
  
  pos() {
    return this.$position;
  }
  
  slice(start, end) {
    return this.$input.slice(start, end);
  }
  
  grammar() {
    let RESULT = FAIL;
    let n, rs;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "grammar") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.id("grammar");
      if (RESULT === FAIL) break;
      
      RESULT = this.id();
      n = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("{");
      if (RESULT === FAIL) break;
      
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          RESULT = this.rule();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      rs = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("}");
      if (RESULT === FAIL) break;
      
      RESULT = this.end();
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Grammar", name: n, rules: rs };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "grammar";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  rule() {
    let RESULT = FAIL;
    let n, ps, p;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "rule") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.id();
      n = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // CHOICE
        let INITPOS = this.$position;
        
        this.$position = INITPOS;
        while (true) { // SEQUENCE
          RESULT = this.p("(");
          if (RESULT === FAIL) break;
          
          while (true) { // DELIMITED
            let ARRAY = [];
            
            while (true) {
              let INITPOS = this.$position;
              
              if (ARRAY.length > 0) {
                RESULT = this.p(",");
                if (RESULT === FAIL) {
                  this.$position = INITPOS;
                  break;
                }
              }
              
              RESULT = this.id();
              if (RESULT === FAIL) {
                this.$position = INITPOS;
                break;
              }
              
              ARRAY.push(RESULT);
            }
            
            RESULT = ARRAY;
            break;
          }
          ps = RESULT;
          if (RESULT === FAIL) break;
          
          RESULT = this.p(")");
          if (RESULT === FAIL) break;
          
          break;
        }
        if (RESULT !== FAIL) break;
        
        this.$position = INITPOS;
        RESULT = [];
        ps = RESULT;
        if (RESULT !== FAIL) break;
        
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.p("=");
      if (RESULT === FAIL) break;
      
      RESULT = this.choice();
      p = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p(";");
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Rule", name: n, parameters: ps, pattern: p };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "rule";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  choice() {
    let RESULT = FAIL;
    let a, b;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "choice") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.sequence();
      a = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          while (true) { // SEQUENCE
            RESULT = this.p("|");
            if (RESULT === FAIL) break;
            
            RESULT = this.sequence();
            b = RESULT;
            if (RESULT === FAIL) break;
            
            RESULT = { tag: "Choice", patterns: [a, b] };
            a = RESULT;
            if (RESULT === FAIL) break;
            
            break;
          }
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = a;
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "choice";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  sequence() {
    let RESULT = FAIL;
    let a, b;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "sequence") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.bind();
      a = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          while (true) { // SEQUENCE
            RESULT = this.ws();
            if (RESULT === FAIL) break;
            
            RESULT = this.bind();
            b = RESULT;
            if (RESULT === FAIL) break;
            
            RESULT = { tag: "Sequence", patterns: [a, b] };
            a = RESULT;
            if (RESULT === FAIL) break;
            
            break;
          }
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = a;
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "sequence";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  bind() {
    let RESULT = FAIL;
    let p, n;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "bind") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.delimited();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        while (true) { // NEGATE
          let INITPOS = this.$position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            
            RESULT = null;
            break;
          }
          else {
            RESULT = FAIL;
            break;
          }
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.p(":");
        if (RESULT === FAIL) break;
        
        while (true) { // NEGATE
          let INITPOS = this.$position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            
            RESULT = null;
            break;
          }
          else {
            RESULT = FAIL;
            break;
          }
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.id();
        n = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Bind", name: n, pattern: p };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.delimited();
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "bind";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  delimited() {
    let RESULT = FAIL;
    let e, d;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "delimited") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.p("(");
        if (RESULT === FAIL) break;
        
        RESULT = this.choice();
        e = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p(";");
        if (RESULT === FAIL) break;
        
        RESULT = this.choice();
        d = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p(")");
        if (RESULT === FAIL) break;
        
        RESULT = this.p("*");
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Delimited",  element: e, delimiter: d };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.p("(");
        if (RESULT === FAIL) break;
        
        RESULT = this.choice();
        e = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p(";");
        if (RESULT === FAIL) break;
        
        RESULT = this.choice();
        d = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p(")");
        if (RESULT === FAIL) break;
        
        RESULT = this.p("+");
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Delimited1", element: e, delimiter: d };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.operator();
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "delimited";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  operator() {
    let RESULT = FAIL;
    let p, c;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "operator") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.p("~");
        if (RESULT === FAIL) break;
        
        RESULT = this.primary();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Negate",    pattern: p };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.p("&");
        if (RESULT === FAIL) break;
        
        RESULT = this.primary();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Lookahead", pattern: p };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.primary();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p("*");
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Repeat",    pattern: p };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.primary();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p("+");
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Repeat1",   pattern: p };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.primary();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p("?");
        if (RESULT === FAIL) break;
        
        RESULT = this.jsInline();
        c = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Optional",  pattern: p, default: c };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.primary();
        p = RESULT;
        if (RESULT === FAIL) break;
        
        RESULT = this.p("?");
        if (RESULT === FAIL) break;
        
        RESULT = { tag: "Optional",  pattern: p, default: null };
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.primary();
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "operator";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  primary() {
    let RESULT = FAIL;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "primary") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      RESULT = this.immediate();
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.action();
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.predicate();
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.callByName();
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.call();
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.subpattern();
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "primary";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  immediate() {
    let RESULT = FAIL;
    let c;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "immediate") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.p("%");
      if (RESULT === FAIL) break;
      
      RESULT = this.jsInline();
      c = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Immediate", code: c };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "immediate";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  action() {
    let RESULT = FAIL;
    let c;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "action") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.p("!");
      if (RESULT === FAIL) break;
      
      RESULT = this.jsInline();
      c = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Action", code: c };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "action";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  predicate() {
    let RESULT = FAIL;
    let c;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "predicate") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.p("?");
      if (RESULT === FAIL) break;
      
      RESULT = this.jsInline();
      c = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Predicate", code: c };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "predicate";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  callByName() {
    let RESULT = FAIL;
    let n, ps;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "callByName") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.id();
      n = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("[");
      if (RESULT === FAIL) break;
      
      while (true) { // DELIMITED
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          if (ARRAY.length > 0) {
            RESULT = this.p(",");
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
          }
          
          RESULT = this.choice();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      ps = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p("]");
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "CallByName", name: n, patterns: ps };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "callByName";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  call() {
    let RESULT = FAIL;
    let n, c;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "call") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.id();
      n = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // OPTIONAL
        let INITPOS = this.$position;
        
        RESULT = this.jsEnclosed();
        if (RESULT === FAIL) {
          this.$position = INITPOS;
          
          RESULT = null;
        }
        
        break;
      }
      c = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = { tag: "Call", name: n, code: c };
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "call";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  subpattern() {
    let RESULT = FAIL;
    let p;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "subpattern") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.p("(");
      if (RESULT === FAIL) break;
      
      RESULT = this.choice();
      p = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.p(")");
      if (RESULT === FAIL) break;
      
      RESULT = p;
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "subpattern";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  jsInline() {
    let RESULT = FAIL;
    let s, e;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "jsInline") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.pos();
      s = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // REPEAT1
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          RESULT = this.jsInlineFragment();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        if (ARRAY.length === 0) RESULT = FAIL;
        else                    RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.pos();
      e = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.slice(s, e);
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "jsInline";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  jsInlineFragment() {
    let RESULT = FAIL;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "jsInlineFragment") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      RESULT = this.range("A", "Z");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.range("a", "z");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.char("_$");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.range("0", "9");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.char(".");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("(");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char(")");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("[");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("]");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("{");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("}");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\"");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            while (true) { // CHOICE
              let INITPOS = this.$position;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this.$position;
                  
                  RESULT = this.char("\"");
                  if (RESULT === FAIL) {
                    this.$position = INITPOS;
                    
                    RESULT = null;
                    break;
                  }
                  else {
                    RESULT = FAIL;
                    break;
                  }
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("\"");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\'");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            while (true) { // CHOICE
              let INITPOS = this.$position;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this.$position;
                  
                  RESULT = this.char("\'");
                  if (RESULT === FAIL) {
                    this.$position = INITPOS;
                    
                    RESULT = null;
                    break;
                  }
                  else {
                    RESULT = FAIL;
                    break;
                  }
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("\'");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("`");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            while (true) { // CHOICE
              let INITPOS = this.$position;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.string("${");
                if (RESULT === FAIL) break;
                
                while (true) { // REPEAT
                  let ARRAY = [];
                  
                  while (true) {
                    let INITPOS = this.$position;
                    
                    RESULT = this.jsEnclosedFragment();
                    if (RESULT === FAIL) {
                      this.$position = INITPOS;
                      break;
                    }
                    
                    ARRAY.push(RESULT);
                  }
                  
                  RESULT = ARRAY;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.string("}");
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this.$position;
                  
                  RESULT = this.char("`");
                  if (RESULT === FAIL) {
                    this.$position = INITPOS;
                    
                    RESULT = null;
                    break;
                  }
                  else {
                    RESULT = FAIL;
                    break;
                  }
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("`");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "jsInlineFragment";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  jsEnclosed() {
    let RESULT = FAIL;
    let s, e;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "jsEnclosed") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      RESULT = this.char("(");
      if (RESULT === FAIL) break;
      
      RESULT = this.pos();
      s = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          RESULT = this.jsEnclosedFragment();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.pos();
      e = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = this.char(")");
      if (RESULT === FAIL) break;
      
      RESULT = this.slice(s, e);
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "jsEnclosed";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  jsEnclosedFragment() {
    let RESULT = FAIL;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "jsEnclosedFragment") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("(");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char(")");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("[");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("]");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("{");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            RESULT = this.jsEnclosedFragment();
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("}");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\"");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            while (true) { // CHOICE
              let INITPOS = this.$position;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this.$position;
                  
                  RESULT = this.char("\"");
                  if (RESULT === FAIL) {
                    this.$position = INITPOS;
                    
                    RESULT = null;
                    break;
                  }
                  else {
                    RESULT = FAIL;
                    break;
                  }
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("\"");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\'");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            while (true) { // CHOICE
              let INITPOS = this.$position;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this.$position;
                  
                  RESULT = this.char("\'");
                  if (RESULT === FAIL) {
                    this.$position = INITPOS;
                    
                    RESULT = null;
                    break;
                  }
                  else {
                    RESULT = FAIL;
                    break;
                  }
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("\'");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("`");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            while (true) { // CHOICE
              let INITPOS = this.$position;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.string("${");
                if (RESULT === FAIL) break;
                
                while (true) { // REPEAT
                  let ARRAY = [];
                  
                  while (true) {
                    let INITPOS = this.$position;
                    
                    RESULT = this.jsEnclosedFragment();
                    if (RESULT === FAIL) {
                      this.$position = INITPOS;
                      break;
                    }
                    
                    ARRAY.push(RESULT);
                  }
                  
                  RESULT = ARRAY;
                  break;
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.string("}");
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                RESULT = this.char("\\");
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              this.$position = INITPOS;
              while (true) { // SEQUENCE
                while (true) { // NEGATE
                  let INITPOS = this.$position;
                  
                  RESULT = this.char("`");
                  if (RESULT === FAIL) {
                    this.$position = INITPOS;
                    
                    RESULT = null;
                    break;
                  }
                  else {
                    RESULT = FAIL;
                    break;
                  }
                }
                if (RESULT === FAIL) break;
                
                RESULT = this.char();
                if (RESULT === FAIL) break;
                
                break;
              }
              if (RESULT !== FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char("`");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        while (true) { // NEGATE
          let INITPOS = this.$position;
          
          RESULT = this.char("()[]{}\"\'`");
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            
            RESULT = null;
            break;
          }
          else {
            RESULT = FAIL;
            break;
          }
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.char();
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "jsEnclosedFragment";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  id(expected) {
    let RESULT = FAIL;
    let c, cs, i;
    
    while (true) { // SEQUENCE
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.initIdChar();
      c = RESULT;
      if (RESULT === FAIL) break;
      
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          RESULT = this.restIdChar();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      cs = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = (c + cs.join(""));
      i = RESULT;
      if (RESULT === FAIL) break;
      
      RESULT = (((expected != null && expected === i) || (expected == null)) ? null : FAIL);
      if (RESULT === FAIL) break;
      
      RESULT = i;
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  initIdChar() {
    let RESULT = FAIL;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "initIdChar") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      RESULT = this.range("A", "Z");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.range("a", "z");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.char("_");
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "initIdChar";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  restIdChar() {
    let RESULT = FAIL;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "restIdChar") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      RESULT = this.range("A", "Z");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.range("a", "z");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.char("_");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.range("0", "9");
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "restIdChar";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  p(charset) {
    let RESULT = FAIL;
    
    while (true) { // SEQUENCE
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      RESULT = this.char(charset);
      if (RESULT === FAIL) break;
      
      break;
    }
    
    return RESULT;
  }
  
  end() {
    let RESULT = FAIL;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "end") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // SEQUENCE
      while (true) { // REPEAT
        let ARRAY = [];
        
        while (true) {
          let INITPOS = this.$position;
          
          RESULT = this.ws();
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            break;
          }
          
          ARRAY.push(RESULT);
        }
        
        RESULT = ARRAY;
        break;
      }
      if (RESULT === FAIL) break;
      
      while (true) { // NEGATE
        let INITPOS = this.$position;
        
        RESULT = this.char();
        if (RESULT === FAIL) {
          this.$position = INITPOS;
          
          RESULT = null;
          break;
        }
        else {
          RESULT = FAIL;
          break;
        }
      }
      if (RESULT === FAIL) break;
      
      break;
    }
    
    MEMO.rule = "end";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  ws() {
    let RESULT = FAIL;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "ws") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      RESULT = this.char(" \t");
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      RESULT = this.newline();
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.string("//");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            while (true) { // SEQUENCE
              while (true) { // NEGATE
                let INITPOS = this.$position;
                
                RESULT = this.newline();
                if (RESULT === FAIL) {
                  this.$position = INITPOS;
                  
                  RESULT = null;
                  break;
                }
                else {
                  RESULT = FAIL;
                  break;
                }
              }
              if (RESULT === FAIL) break;
              
              RESULT = this.char();
              if (RESULT === FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.newline();
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.string("/*");
        if (RESULT === FAIL) break;
        
        while (true) { // REPEAT
          let ARRAY = [];
          
          while (true) {
            let INITPOS = this.$position;
            
            while (true) { // SEQUENCE
              while (true) { // NEGATE
                let INITPOS = this.$position;
                
                RESULT = this.string("*/");
                if (RESULT === FAIL) {
                  this.$position = INITPOS;
                  
                  RESULT = null;
                  break;
                }
                else {
                  RESULT = FAIL;
                  break;
                }
              }
              if (RESULT === FAIL) break;
              
              RESULT = this.char();
              if (RESULT === FAIL) break;
              
              break;
            }
            if (RESULT === FAIL) {
              this.$position = INITPOS;
              break;
            }
            
            ARRAY.push(RESULT);
          }
          
          RESULT = ARRAY;
          break;
        }
        if (RESULT === FAIL) break;
        
        RESULT = this.string("*/");
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "ws";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
  newline() {
    let RESULT = FAIL;
    
    let MEMO = this.$memotab[this.$position];
    if (MEMO.rule === "newline") {
      this.$position = MEMO.position;
      return MEMO.result;
    }
    
    while (true) { // CHOICE
      let INITPOS = this.$position;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\r");
        if (RESULT === FAIL) break;
        
        while (true) { // OPTIONAL
          let INITPOS = this.$position;
          
          RESULT = this.char("\n");
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            
            RESULT = null;
          }
          
          break;
        }
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      this.$position = INITPOS;
      while (true) { // SEQUENCE
        RESULT = this.char("\n");
        if (RESULT === FAIL) break;
        
        while (true) { // OPTIONAL
          let INITPOS = this.$position;
          
          RESULT = this.char("\r");
          if (RESULT === FAIL) {
            this.$position = INITPOS;
            
            RESULT = null;
          }
          
          break;
        }
        if (RESULT === FAIL) break;
        
        break;
      }
      if (RESULT !== FAIL) break;
      
      break;
    }
    
    MEMO.rule = "newline";
    MEMO.position = this.$position;
    MEMO.result = RESULT;
    
    return RESULT;
  }
  
}
