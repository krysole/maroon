#!/usr/bin/env node
//
// The Maroon Programming Language
//
// Copyright 2018 Lorenz Pretterhofer <krysole@alexicalmistake.com>
//
// Permission to use, copy, modify, and distribute this work for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE WORK IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS WORK INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS WORK.
//
"use strict";

global.BigNumber = require("bignumber.js");


let fs                      = require("fs");
let inspect                 = require("util").inspect;

let Parser                  = require("./Parser.js");

let InstallPlatform         = require("./InstallPlatform.js");
let InstallSourceUnit       = require("./InstallSourceUnit.js");

let Simplify                = require("./Simplify.js");

let AnalyzeDeclarationInfo  = require("./AnalyzeDeclarationInfo.js");
let AnalyzeFunctionTypes    = require("./AnalyzeFunctionTypes.js");
let AnalyzeTypeInferencing  = require("./AnalyzeTypeInferencing.js");
let AnalyzeTypePropagation  = require("./AnalyzeTypePropagation.js");
let AnalyzeAddrReferences   = require("./AnalyzeAddrReferences.js");

let AnalyzeFrameLayout      = require("./AnalyzeFrameLayout.js");

let GenerateAsm             = require("./GenerateAsm.js");


Object.defineProperty(Array.prototype, "excludes", {
  value: function (object) { return !this.includes(object); },
  enumerable: false,
  configurable: true
});

Object.copy = function copy(source) {
  let o = {};
  
  for (let name in source) {
    o[name] = source[name];
  }
  
  return o;
}

Object.transmute = function transmute(target, source) {
  for (let name in target) {
    delete target[name];
  }
  
  for (let name in source) {
    target[name] = source[name];
  }
};

Object.hasOwnProperty = function hasOwnProperty(object, name) {
  return Object.prototype.hasOwnProperty.call(object, name);
};


function main(argv) {
  let unit        = { tag: "Unit", parent: null, decls: {} };
  let sourcePaths = ["./main.mn", "libc.mn"];
  
  
  InstallPlatform.install(unit);
  
  
  for (let sourcePath of sourcePaths) {
    let sourcePath   = "./main.mn";
    let sourceString = fs.readFileSync(sourcePath, "utf8");
    let sourceAst    = new Parser().match("unit", sourceString, sourcePath);
    
    InstallSourceUnit.install(unit, sourceAst);
  }
  
  
  // output(null, inspect(unit, { depth: null }) + "\n");
  
  
  Simplify(unit);
  
  
  // output(null, inspect(unit, { depth: null }) + "\n");
  
  
  AnalyzeDeclarationInfo(unit);
  AnalyzeFunctionTypes(unit);
  AnalyzeTypeInferencing(unit);
  AnalyzeTypePropagation(unit);
  AnalyzeAddrReferences(unit);
  
  
  // output(null, inspect(unit, { depth: null }) + "\n");


  AnalyzeFrameLayout(unit);
  
  
  // output(null, inspect(unit, { depth: null }) + "\n");
  
  
  GenerateAsm(unit);
  
  
  output(null, unit.asm);
  
  
  throw new Error();
};

function abort(message) {
  console.error(message);
  process.exit(1);
};

function output(path, string) {
  if (path != null) fs.writeFileSync(path, string);
  else              process.stdout.write(string);
  process.exit(0);
};

function usage() {
  console.error(`usage: maroon`);
  console.error(``);
  process.exit(1);
};


setTimeout(_ => {
  main(process.ARGV);
});
