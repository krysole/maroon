TASKLIST

- Rename array to vector, on the basis that arrays are resizing from the 
	perspective of most modern dynamic languages like Objective-C/Swift, JavaScript, 
	Python and Ruby. Only C++ based languages seem to use the terms in reverse.
	Vectors would be fixed length and intended to be used to improve the performance
	of mathematical vector calculations, or other fixed count arrays.

- Initialization of array null initialization should be based on a proper loop and
	not an unrolled loop. Otherwise large arrays would be uninitializable for the
	most part (without excessive codegen).
- Initialization of global array with null initialization should probably allow
	for zero cleared initialization as required.
- There should be a zero fill initialization for array globals, for fast allocation
	of very large arrays without taking up executable space.
- There should be a zero fill initialization for array locals that mirrors zero
	initialization for globals, for consistency.

- Implement bounds checking for array subscripting, since we know the bounds of
	arrays directly. Obviously if the index is known to be within bounds then we
	shouldn't generate a bounds check, so some direction should be possible during
	analysis or via an annotation.

- Implement automatic synthesis of provided methods like allocate for concrete
	classes, or the class tag behaviors.
- Implement code generation for Fluorite methods. This will require some changes
	to frame layout, to support the GC frame link and GC id count. Perhaps a 
	separate frame layout style would make sense, one that isn't based on fixed
	frame size, but instead does allow for the stack to grow and shrink.
- Implement fluorite_class_data generation for classes.
- Update method code generation to at least ensure that the managed references
	are stored in the stack frame separately from other stack frame data, and that
	they are at the beginning of the frame, along with a 32 bit count field and 
	managed frame link field as an offset rather than a pointer.
- Implement va varargs primitive functions for methods.

- Continue analyzing the design and tasks for The Fluorite Programming Language.
- Consider changing IntegerLiteral et cetera, into IntegerExpression et cetera.
